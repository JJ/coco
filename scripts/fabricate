#!/usr/bin/env python
# -*- mode: python -*-
import re
import sys
import shutil
import zipfile
import argparse
import subprocess

from pathlib import Path
from colorama import init as colorama_init
from colorama import Fore, Style

colorama_init()

SCRIPT_FILE = Path(__file__)
ROOT_DIR = SCRIPT_FILE.parent.parent.resolve()
SRC_DIR = ROOT_DIR / "code-experiments" / "src"
DIST_DIR = ROOT_DIR / "dist"

BUILD_DIR = ROOT_DIR / "code-experiments" / "build"
C_DIR = BUILD_DIR / "c"
JAVA_DIR = BUILD_DIR / "java"
MATLAB_DIR = BUILD_DIR / "matlab"
OCTAVE_DIR = BUILD_DIR / "octave"
PYTHON_DIR = BUILD_DIR / "python"
RUST_DIR = BUILD_DIR / "rust"

CORE_FILES = ['code-experiments/src/coco_random.c',
              'code-experiments/src/coco_suite.c',
              'code-experiments/src/coco_observer.c',
              'code-experiments/src/coco_archive.c'
             ]


def info(step, message):
    print(f"{Style.RESET_ALL}{Style.BRIGHT}{Fore.BLUE}{step.upper()}{Style.NORMAL}{Fore.RESET}\t{message}",
          file=sys.stderr)

class Amalgator:
    """Amalgamate a set of files into a single file for unity builds."""
    def __init__(self, destination_file, release):
        self.release = release
        self.included_files = []
        self.destination_fd = open(destination_file, 'w')
        self.destination_fd.write("""
/************************************************************************
 * WARNING
 *
 * This file is an auto-generated amalgamation. 
 *
 * DO *NOT* EDIT! ALL CHANGES WILL BE LOST!
 ************************************************************************/

""")

    def finish(self):
        self.destination_fd.close()

    def __del__(self):
        self.finish()

    def process_file(self, filename):
        if filename in self.included_files:
            return
        self.included_files.append(filename)
        with open(filename) as fd:
            line_number = 1
            if not self.release:
                self.destination_fd.write("#line %i \"%s\"\n" % (line_number, filename))
            for line in fd.readlines():
                ## Is this an include statement?
                matches = re.match("#include \"(.*)\"", line)
                if matches:
                    include_file = filename.parent / matches.group(1)
                    ## Has this file not been included previously?
                    if include_file not in self.included_files:
                        self.process_file(include_file)
                    if not self.release:
                        self.destination_fd.write("#line %i \"%s\"\n" % 
                                                  (line_number + 1, filename))
                else:
                    self.destination_fd.write(line)
                line_number += 1


def amalgamate(source_files, destination_file, release=False, verbose=False):
    """Amalgamate a list of source files into a single unity build file

    Parameters
    ----------

    source_files
        List of files to amalgamate
    destination_file 
        Unity build file name
    release
        If False, embed information about the file name and line number
        where the source originated into the `destination_file`.
    verbose
        Show which files are included in the amalgamation.
    """
    info("aml", destination_file)
    amalgator = Amalgator(ROOT_DIR / destination_file, release)
    if isinstance(source_files, str):
        source_files = [source_files]
    for filename in source_files:
        if verbose:
            info("", f"include {filename}")
        if isinstance(filename, str):
            filename = Path(filename)
        if not filename.is_absolute():
            filename = ROOT_DIR / filename
        amalgator.process_file(filename)
    amalgator.finish()


def git(args):
    """Run a git command and return its output.

    All errors are deemed fatal and the system will quit.

    WARNING: This method is also defined in ../../code-postprocessing/cocopp/toolsdivers.py.
    If you change something you have to change it in both files.
    """
    full_command = ['git', *args]
    output = subprocess.check_output(full_command, 
                                     stderr=subprocess.STDOUT,
                                     universal_newlines=True)
    output = output.rstrip()
    return output


def git_version(format="pep440"):
    """Return somewhat readible version number from git, like
    '0.1-6015-ga0a3769' if not pep440 else '0.1.6015'

    """
    res = git(['describe', '--tags']).lstrip("v").split("-")
    if len(res) == 1: # Clean tagged release
        return res[0] # Strip leading v
    else:
        version, offset, hash = res
        offset = int(offset)
        major, minor, release = version.split(".")

        if format == "pep440":
            return f"{major}.{minor}.{int(release) + 1}-dev{offset}+{hash}"
        elif format == "rust":
            return f"{major}.{minor}.{int(release) + 1}-dev.{offset}+{hash}"
        else:
            raise(f"Unknown version format '{format}'.")


def git_revision():
    """Return unreadible git revision identifier"""
    return git(['rev-parse', 'HEAD'])


def copy_file(source, destination, verbose=True):
    if isinstance(source, str):
        source = Path(source)
    if isinstance(destination, str):
        destination = Path(destination)

    if source.is_absolute():
        source = source.relative_to(ROOT_DIR)
    if destination.is_absolute():
        destination = destination.relative_to(ROOT_DIR)
    if verbose:
        info("copy", f"{source} -> {destination}")
    shutil.copy(ROOT_DIR / source, ROOT_DIR / destination)


def write_version_file(filename, version):
    info("version", f"{version} -> {filename}")
    with open(ROOT_DIR / filename, 'wt') as fd:
        fd.write(version)


def write_version_to_python(filename, version):
    info("version", f"{version} -> {filename}")
    with open(ROOT_DIR / filename, "wt") as fd:
        fd.write("# file generated by do.py\n")
        fd.write("# don't change, don't track in version control!\n")
        fd.write(f'__version__ = version = "{version}"\n')


def write_version_to_c_header(filename, version,
                               variable="coco_version",
                               guard="COCO_VERSION"):
    info("version", f"{version} -> {filename}")
    with open(ROOT_DIR / filename, "wt") as fd:
        fd.write("/* file generated by do.py\n")
        fd.write(" * don't change, don't track in version control!\n")
        fd.write(" */\n\n")
        fd.write(f"#ifndef {guard}_H\n")
        fd.write(f"#define {guard}_H\n")
        fd.write("/**\n")
        fd.write("* @brief COCO's version.\n")
        fd.write("*\n")
        fd.write("* The version number is dervied from the latest tag in the\n")
        fd.write("* repository plus the number of commits after the tag.\n")
        fd.write("*/\n")
        fd.write("/**@{*/\n")
        fd.write(f'static const char { variable }[{ len(version)+1 }] = "{ version }";\n')
        fd.write("/**@}*/\n")
        fd.write("#endif\n")

################################################################################
## MAIN

parser = argparse.ArgumentParser(prog="fabricate", description="""
Fabricate a complete set of build files by amalgamating the C sources
and writing version information into various places. No matter what is
skipped, version information is always updated.""")

parser.add_argument("-v", "--verbose", action="store_true",
              help="More verbose output")
parser.add_argument("-r", "--release", action="store_true",
              help="Amalgamate in release mode by stripping line number and file information.")
parser.add_argument("--skip-c", action="store_true",
              help="Skip fabricating C cocoex code.")
parser.add_argument("--skip-java", action="store_true",
              help="Skip fabricating Java cocoex code.")
parser.add_argument("--skip-matlab", action="store_true",
              help="Skip fabricating Matlab cocoex code.")
parser.add_argument("--skip-octave", action="store_true",
              help="Skip fabricating Octave cocoex code.")
parser.add_argument("--skip-python", action="store_true",
              help="Skip fabricating Python cocoex code.")
parser.add_argument("--skip-postprocessing", action="store_true",
              help="Skip fabricating postprocessing (Python cocopp) code.")
parser.add_argument("--skip-rust", action="store_true",
              help="Skip fabricating Rust cocoex code.")
parser.add_argument("--skip-unit-tests", action="store_true",
              help="Skip fabricating C unit tests.")
args = parser.parse_args()
    
COCO_VERSION = git_version()
COCO_RUST_VERSION = git_version(format="rust")
write_version_file(".version", COCO_VERSION)
    

DIST_DIR.mkdir(exist_ok=True)
C_DISTFILE = DIST_DIR / f"cocoex-c-{COCO_VERSION}.zip"
MATLAB_DISTFILE = DIST_DIR / f"cocoex-matlab-{COCO_VERSION}.zip"
OCTAVE_DISTFILE = DIST_DIR / f"cocoex-octave-{COCO_VERSION}.zip"
JAVA_DISTFILE = DIST_DIR / f"cocoex-java-{COCO_VERSION}.zip"
RUST_DISTFILE = DIST_DIR / f"cocoex-rust-{COCO_VERSION}.zip"

if not args.skip_c:
    write_version_file("code-experiments/build/c/VERSION", COCO_VERSION)
    write_version_to_c_header("code-experiments/src/coco_version.h", COCO_VERSION)
    amalgamate(CORE_FILES + ['code-experiments/src/coco_runtime_c.c'],
               C_DIR / 'coco.c',args.release)
    amalgamate('code-experiments/src/coco.h',
               C_DIR / 'coco.h',args.release)
    copy_file('code-experiments/build/c/coco.c',
              'code-experiments/examples/bbob2009-c-cmaes/coco.c')
    copy_file('code-experiments/build/c/coco.h',
              'code-experiments/examples/bbob2009-c-cmaes/coco.h')
    
    info("BUNDLE", f"C -> {C_DISTFILE.name}")
    with zipfile.ZipFile(C_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in C_DIR.glob("*"):
            archive.write(fn, arcname=f"cocoex-c/{fn.name}")

if not args.skip_python:
    write_version_to_python("code-experiments/build/python/src/cocoex/_version.py", COCO_VERSION)
    amalgamate(CORE_FILES + ['code-experiments/src/coco_runtime_c.c'],
               'code-experiments/build/python/src/cocoex/coco.c',
              args.release)
    amalgamate('code-experiments/src/coco.h',
               'code-experiments/build/python/src/cocoex/coco.h',
              args.release)
    copy_file('code-experiments/src/bbob2009_testcases.txt',
              'code-experiments/build/python/test/bbob2009_testcases.txt')
    copy_file('code-experiments/src/bbob2009_testcases2.txt',
              'code-experiments/build/python/test/bbob2009_testcases2.txt')

if not args.skip_postprocessing:
    write_version_to_python("code-postprocessing/cocopp/_version.py", COCO_VERSION)

if not args.skip_matlab:
    write_version_file("code-experiments/build/matlab/VERSION", COCO_VERSION)
    
    amalgamate(CORE_FILES + ['code-experiments/src/coco_runtime_matlab.c'],
               MATLAB_DIR / 'coco.c', args.release)
    amalgamate('code-experiments/src/coco.h', MATLAB_DIR / 'coco.h', args.release)
    
    info("BUNDLE", f"Matlab -> {MATLAB_DISTFILE.name}")
    with zipfile.ZipFile(MATLAB_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in MATLAB_DIR.glob("*"):
            archive.write(fn, arcname=f"cocoex-matlab/{fn.name}")

if not args.skip_octave:
    amalgamate(CORE_FILES + ['code-experiments/src/coco_runtime_c.c'],
               OCTAVE_DIR / "coco.c", args.release)
    amalgamate('code-experiments/src/coco.h', OCTAVE_DIR / "coco.h", args.release)
    
    if not args.verbose:
        info("copy", "Matlab files to Octave build root")

    matlab_files = list(MATLAB_DIR.glob("coco*.m"))
    matlab_files.append(MATLAB_DIR / "cons.m")
    matlab_files.append(MATLAB_DIR / "cocoCall.c")
    matlab_files.append(MATLAB_DIR / "exampleexperiment.m")
    matlab_files.append(MATLAB_DIR / "my_fmincon.m")
    matlab_files.append(MATLAB_DIR / "my_optimizer.m")
    for file in matlab_files:
        copy_file(file, OCTAVE_DIR / file.name, args.verbose)
    
    info("BUNDLE", f"Octave -> {OCTAVE_DISTFILE.name}")
    with zipfile.ZipFile(OCTAVE_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in OCTAVE_DIR.glob("*"):
            archive.write(fn, arcname=f"cocoex-octave/{fn.name}")

if not args.skip_java:
    write_version_file("code-experiments/build/java/VERSION", COCO_VERSION)
    amalgamate(CORE_FILES + ['code-experiments/src/coco_runtime_c.c'], JAVA_DIR / "coco.c", args.release)
    amalgamate('code-experiments/src/coco.h',
               'code-experiments/build/java/coco.h',
               args.release)
    
    info("BUNDLE", f"Java -> {JAVA_DISTFILE.name}")
    with zipfile.ZipFile(JAVA_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in JAVA_DIR.glob("*"):
            archive.write(fn, arcname=f"cocoex-java/{fn.name}")

if not args.skip_rust:
    import toml
    write_version_file("code-experiments/build/rust/VERSION", COCO_VERSION)
    amalgamate(CORE_FILES + ['code-experiments/src/coco_runtime_c.c'],
               'code-experiments/build/rust/coco-sys/vendor/coco.c',
               args.release)
    amalgamate('code-experiments/src/coco.h',
               'code-experiments/build/rust/coco-sys/vendor/coco.h',
               args.release)
    # FIXME: Why?
    copy_file('code-experiments/src/coco_internal.h',
          'code-experiments/build/rust/coco-sys/vendor/coco_internal.h')

    info("TOML", f"code-experiments/build/rust/Cargo.toml")
    cr = toml.load(RUST_DIR / "Cargo.toml.in")
    cr["package"]["version"] = COCO_RUST_VERSION
    cr["dependencies"]["coco-sys"]["version"] = COCO_RUST_VERSION.split("+")[0]
    with open(RUST_DIR / "Cargo.toml", "w") as fd:
        toml.dump(cr, fd)
    
    info("TOML", f"code-experiments/build/rust/coco-sys/Cargo.toml")
    cs = toml.load(RUST_DIR / "coco-sys" / "Cargo.toml.in")
    cs["package"]["version"] = COCO_RUST_VERSION
    with open(RUST_DIR / "coco-sys" / "Cargo.toml", "w") as fd:
        toml.dump(cs, fd)

    info("BUNDLE", f"Rust -> {RUST_DISTFILE.name}")
    with zipfile.ZipFile(RUST_DISTFILE, "w", compression=zipfile.ZIP_DEFLATED) as archive:
        for fn in RUST_DIR.glob("**/*"):
            if fn.is_file():
                archive.write(fn, arcname=f"cocoex-rust/{fn.relative_to(RUST_DIR)}")

if not args.skip_unit_tests:
    amalgamate(CORE_FILES + ['code-experiments/src/coco_runtime_c.c'],
               "code-experiments/test/unit-test/coco.c", args.release)
    amalgamate('code-experiments/src/coco.h',
               "code-experiments/test/unit-test/coco.h", args.release)
